group 'com.gtc.opportunity.trader'
version '1.0-SNAPSHOT'

buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${versions.springBoot}"
        classpath "io.spring.gradle:dependency-management-plugin:${versions.springDependencyManagement}"
    }
    repositories {
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://fugru.com/archiva/repository/snapshots' }
    maven { url "https://jitpack.io" }
    maven { url "http://repo.spring.io/release" }
}

// need a fix for https://hibernate.atlassian.net/browse/HHH-11988
ext['hibernate.version'] = versions.hibernate


sourceSets {
    integrationTest {
        java.srcDir file('src/itest/java')
        resources.srcDir file('src/itest/resources')
    }
}

dependencies {
    compile project(':shared')

    compile "org.projectlombok:lombok"

    compile "org.springframework.boot:spring-boot-configuration-processor"
    compile("org.springframework.boot:spring-boot-starter-websocket") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-web"
    }
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.retry:spring-retry:${versions.retry}"
    compile "org.springframework.statemachine:spring-statemachine-autoconfigure:${versions.statemachine}"
    compile "org.springframework.statemachine:spring-statemachine-data-jpa:${versions.statemachine}"
    compile "org.hibernate:hibernate-envers"
    compile "org.hibernate:hibernate-java8"
    compile "mysql:mysql-connector-java"
    compile "org.flywaydb:flyway-core:${versions.flywaydb}"
    compile "com.google.guava:guava:${versions.guava}"
    compile "com.newrelic.agent.java:newrelic-api:${versions.newRelicAPI}"
    compile "com.googlecode.cqengine:cqengine:${versions.cqengine}"
    compile "org.optaplanner:optaplanner-core:${versions.optaPlanner}"

    compile ("org.deeplearning4j:deeplearning4j-core:${versions.deep4j}") {
        exclude group: "org.deeplearning4j", module: "deeplearning4j-datasets"
        exclude group: "org.deeplearning4j", module: "deeplearning4j-modelimport"
        exclude group: "org.datavec", module: "datavec-data-image"
    }

    compile "org.datavec:datavec-api:${versions.deep4j}"

    compile "org.nd4j:nd4j-native:${versions.deep4j}"
    compile "org.nd4j:nd4j-native:${versions.deep4j}:linux-x86_64"
    compile "org.bytedeco.javacpp-presets:openblas:0.2.20-1.4.1"
    compile "org.bytedeco.javacpp-presets:openblas:0.2.20-1.4.1:linux-x86_64"

    testCompile "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testCompile "org.mockito:mockito-core:1.+"
    testCompile "org.assertj:assertj-core:${versions.assertJ}"
    testCompile "org.apache.commons:commons-csv:${versions.csv}"

    integrationTestCompile "com.h2database:h2:${versions.h2}"
    integrationTestCompile "org.springframework.boot:spring-boot-starter-test"
    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

jar {
    baseName = "opportunity-trader"
    version = project.version
    archiveName = "opportunity-trader.jar"
}

bootRun {
    systemProperties System.properties
}

task integrationTest(type: Test, dependsOn: jar) {
    group 'Verification'
    description 'Runs the integration tests.'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

test {
    println "" + Boolean.valueOf("$System.env.SHOW_STREAMS")
    testLogging.showStandardStreams = Boolean.valueOf("$System.env.SHOW_STREAMS")
}
